<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--1.配置通配符的扫描器
         base-package="cn.kgc.demo.*"  "*"为通配符，匹配所有
         扫描cn.kgc.demo此包下面的类或者子包及其子包的类
    -->
    <context:component-scan base-package="cn.k0508.*"/>

    <!--2.配置读取数据库的db.properties配置文件-->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:db.properties"></property>
    </bean>

<!--    配置数据源，使用db.properties连接上数据库-->
    <!--3.配置数据源，我们使用spring框架去管理-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driver}"></property>
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>
        <property name="url" value="${url}"></property>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

    </bean>

    <!--4.配置SqlSessionFactory的创建且为单例模式，我们使用spring框架去管理-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        注入数据源-->
        <property name="dataSource" ref="druidDataSource"/>
<!--        注入Mybatis的文件,sqlMapConfig中有些类似分页插件是无法交由spring管理的,因此还需要读取sqlMapConfig.xml-->
        <property name="configLocation" value="classpath:sqlMapConfig.xml"/>

<!--        注入MyBatis的别名配置-->
        <property name="typeAliasesPackage" value="cn.k0508.pojo"/>
        
        <property name="mapperLocations" value="mapper/*.xml"/>
    </bean>

<!--    5.将Mapper交由Spring管理-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        引入sqlSessionFactory对象-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
<!--        配置扫描包扫描所有的Mapper文件-->
        <property name="basePackage" value="cn.k0508.dao"/>
    </bean>
<!--    配置事务管理器-->
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--        注入数据源-->
        <property name="dataSource" ref="druidDataSource"/>
    </bean>
<!--    注解版事务配置-->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="tx"/>

<!--    以下为非注解版-->
<!--&lt;!&ndash;    配置事务的传播行为&ndash;&gt;-->
<!--    <tx:advice id="advice" transaction-manager="tx">-->
<!--        <tx:attributes>-->
<!--&lt;!&ndash;            配置增删改查的传播行为&ndash;&gt;-->
<!--            <tx:method name="del*" propagation="REQUIRED"/>-->
<!--            <tx:method name="update*" propagation="REQUIRED"/>-->
<!--            <tx:method name="modify*" propagation="REQUIRED"/>-->
<!--            <tx:method name="remove*" propagation="REQUIRED"/>-->
<!--            <tx:method name="insert*" propagation="REQUIRED"/>-->
<!--            <tx:method name="add*" propagation="REQUIRED"/>-->
<!--            <tx:method name="select*" propagation="SUPPORTS"/>-->
<!--            <tx:method name="find*" propagation="SUPPORTS"/>-->
<!--            <tx:method name="get*" propagation="SUPPORTS"/>-->
<!--            <tx:method name="*" propagation="SUPPORTS"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--&lt;!&ndash;    开启切面&ndash;&gt;-->
<!--    <aop:config proxy-target-class="true">-->
<!--&lt;!&ndash;        配置切入点&ndash;&gt;-->
<!--        <aop:advisor advice-ref="advice" pointcut="execution(* cn.k0508.service.impl..*.*(..))"/>-->
<!--    </aop:config>-->
</beans>